import time
import numpy as np

#Hyperparameters

GL_HOP = 192               #hop size (window size = 6*hop)
GL_SR = 22050              #sampling rate
GL_MIN_LEVEL_DB = -100     #reference values to normalize data
GL_REF_LEVEL_DB = 20

GL_SHAPE = 192              #length of time axis of split specrograms to feed to generator
GL_VECLEN = 128           #length of vector generated by siamese vector
#GL_BS = 16               #batch size
GL_BS = 13               #batch siz

GL_ALPHA = 0.
GL_BETA = 10.
GL_GAMMA = 10.
GL_DELTA = 2.            #constant for siamese loss

def getconstants():
   msgstr = f"hop size: {GL_HOP} \n"
   msgstr += f"shape: {GL_SHAPE} \n"
   msgstr += f"Siamese out len: {GL_VECLEN} \n"
   msgstr += f"batch size: {GL_BS} \n"
   msgstr += f"Sample rate: {GL_SR} \n"
   msgstr += f"net params: alpha: {GL_ALPHA}, beta: {GL_BETA}, gamma: {GL_GAMMA}, delta: {GL_DELTA} \n"
   return msgstr

logfile = open("log.txt", "a")
GL_STARTTIME = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
logfile.write("######### " + GL_STARTTIME + " Starting training" + " #########\n")

def log(msg: str, end="\n"):
    print(msg, end=end)
    if end == "\n":
        msg = msg + "\n"
    logfile.write(msg)

def bins_to_secs(bins, sr=22050, hop=192):
    return bins * hop // sr

def secs_to_bins(secs, sr=22050, hop=192):
    # secs + 1 bc offset of -1 coming from somewhere
    return int(np.ceil((secs + 1) * sr / hop))
